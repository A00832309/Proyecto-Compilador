
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIV DO ELSE END EQ FLOAT GT ID IF INT LBRACE LCO LPAREN LT MAIN MINUS MULT NEQ PLUS PRINT PROGRAM RBRACE RCO RPAREN SEMI VAR VOID WHILEprogram : PROGRAM ID SEMI vars_decls func_decls MAIN body ENDfunc_decls : func_decl func_decls\n                  | emptyfunc_decl : VOID ID LPAREN params RPAREN LCO local_vars body RCO SEMIparams : param_list\n              | emptyparam_list : ID COLON type\n                 | ID COLON type COMMA param_listbody : LBRACE statements RBRACEstatements : statement statements\n                  | emptystatement : assignment\n                 | condition\n                 | loop\n                 | func_call\n                 | print_stmtassignment : ID EQ expression SEMIcondition : IF LPAREN expression RPAREN body else_part SEMIelse_part : ELSE body\n                 | emptyloop : WHILE LPAREN expression RPAREN DO body SEMIfunc_call : ID LPAREN args RPAREN SEMIargs : expression_list\n            | emptyexpression_list : expression\n                       | expression COMMA expression_listprint_stmt : PRINT LPAREN print_args RPAREN SEMIprint_args : print_list\n                  | emptyprint_list : printable\n                 | printable COMMA print_listprintable : expression\n                | CTE_STRINGvars_decls : vars_decl vars_decls\n                  | emptyvars_decl : VAR ID list_ids COLON type SEMIlist_ids : COMMA ID list_ids\n                | emptylocal_vars : vars_decl\n                  | emptytype : INT\n            | FLOATexpression : simple_expression\n                  | simple_expression relop simple_expressionsimple_expression : term\n                         | term PLUS simple_expression\n                         | term MINUS simple_expressionterm : factor\n            | factor mulop termfactor : LPAREN expression RPAREN\n              | facestrc facestrc : PLUS faciden\n                | MINUS faciden\n                | faciden  faciden : ID\n                | ctecte : CTE_INT\n           | CTE_FLOATrelop : LT\n             | GT\n             | NEQmulop : MULT\n             | DIVempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,26,],[0,-1,]),'ID':([2,8,12,19,22,23,28,30,31,32,33,34,49,50,51,52,53,61,62,64,84,85,86,87,88,89,90,93,94,95,98,102,103,112,116,125,127,],[3,14,17,25,35,39,35,-12,-13,-14,-15,-16,57,57,57,57,57,57,57,57,-17,57,-59,-60,-61,57,57,57,-62,-63,57,57,39,-22,-27,-18,-21,]),'SEMI':([3,43,44,45,47,57,58,59,60,63,65,66,67,68,69,91,92,97,101,107,108,109,110,111,114,120,122,123,124,126,],[4,56,-41,-42,-9,-55,84,-43,-45,-48,-51,-54,-56,-57,-58,-52,-53,112,116,-44,-46,-47,-49,-50,-64,125,-20,127,128,-19,]),'VAR':([4,6,56,83,],[8,8,-36,8,]),'VOID':([4,5,6,7,10,13,56,128,],[-64,12,-64,-35,12,-34,-36,-4,]),'MAIN':([4,5,6,7,9,10,11,13,16,56,128,],[-64,-64,-64,-35,15,-64,-3,-34,-2,-36,-4,]),'COMMA':([14,25,44,45,57,59,60,63,65,66,67,68,69,73,79,80,81,82,91,92,107,108,109,110,111,],[19,19,-41,-42,-55,-43,-45,-48,-51,-54,-56,-57,-58,98,102,-32,-33,103,-52,-53,-44,-46,-47,-49,-50,]),'COLON':([14,18,20,25,39,46,],[-64,24,-38,-64,54,-37,]),'LBRACE':([15,56,83,99,104,105,106,115,121,],[22,-36,-64,22,22,-39,-40,22,22,]),'LPAREN':([17,35,36,37,38,49,50,51,52,53,64,85,86,87,88,89,90,93,94,95,98,102,],[23,50,51,52,53,64,64,64,64,64,64,64,-59,-60,-61,64,64,64,-62,-63,64,64,]),'END':([21,47,],[26,-9,]),'RBRACE':([22,27,28,29,30,31,32,33,34,48,84,112,116,125,127,],[-64,47,-64,-11,-12,-13,-14,-15,-16,-10,-17,-22,-27,-18,-21,]),'IF':([22,28,30,31,32,33,34,84,112,116,125,127,],[36,36,-12,-13,-14,-15,-16,-17,-22,-27,-18,-21,]),'WHILE':([22,28,30,31,32,33,34,84,112,116,125,127,],[37,37,-12,-13,-14,-15,-16,-17,-22,-27,-18,-21,]),'PRINT':([22,28,30,31,32,33,34,84,112,116,125,127,],[38,38,-12,-13,-14,-15,-16,-17,-22,-27,-18,-21,]),'RPAREN':([23,40,41,42,44,45,50,53,57,59,60,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,91,92,96,107,108,109,110,111,113,117,118,],[-64,55,-5,-6,-41,-42,-64,-64,-55,-43,-45,-48,-51,-54,-56,-57,-58,97,-23,-24,-25,99,100,101,-28,-29,-30,-32,-33,-7,-52,-53,111,-44,-46,-47,-49,-50,-26,-31,-8,]),'INT':([24,54,],[44,44,]),'FLOAT':([24,54,],[45,45,]),'EQ':([35,],[49,]),'ELSE':([47,114,],[-9,121,]),'RCO':([47,119,],[-9,124,]),'PLUS':([49,50,51,52,53,57,60,63,64,65,66,67,68,69,85,86,87,88,89,90,91,92,93,94,95,98,102,110,111,],[61,61,61,61,61,-55,89,-48,61,-51,-54,-56,-57,-58,61,-59,-60,-61,61,61,-52,-53,61,-62,-63,61,61,-49,-50,]),'MINUS':([49,50,51,52,53,57,60,63,64,65,66,67,68,69,85,86,87,88,89,90,91,92,93,94,95,98,102,110,111,],[62,62,62,62,62,-55,90,-48,62,-51,-54,-56,-57,-58,62,-59,-60,-61,62,62,-52,-53,62,-62,-63,62,62,-49,-50,]),'CTE_INT':([49,50,51,52,53,61,62,64,85,86,87,88,89,90,93,94,95,98,102,],[68,68,68,68,68,68,68,68,68,-59,-60,-61,68,68,68,-62,-63,68,68,]),'CTE_FLOAT':([49,50,51,52,53,61,62,64,85,86,87,88,89,90,93,94,95,98,102,],[69,69,69,69,69,69,69,69,69,-59,-60,-61,69,69,69,-62,-63,69,69,]),'CTE_STRING':([53,102,],[81,81,]),'LCO':([55,],[83,]),'MULT':([57,63,65,66,67,68,69,91,92,111,],[-55,94,-51,-54,-56,-57,-58,-52,-53,-50,]),'DIV':([57,63,65,66,67,68,69,91,92,111,],[-55,95,-51,-54,-56,-57,-58,-52,-53,-50,]),'LT':([57,59,60,63,65,66,67,68,69,91,92,108,109,110,111,],[-55,86,-45,-48,-51,-54,-56,-57,-58,-52,-53,-46,-47,-49,-50,]),'GT':([57,59,60,63,65,66,67,68,69,91,92,108,109,110,111,],[-55,87,-45,-48,-51,-54,-56,-57,-58,-52,-53,-46,-47,-49,-50,]),'NEQ':([57,59,60,63,65,66,67,68,69,91,92,108,109,110,111,],[-55,88,-45,-48,-51,-54,-56,-57,-58,-52,-53,-46,-47,-49,-50,]),'DO':([100,],[115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars_decls':([4,6,],[5,13,]),'vars_decl':([4,6,83,],[6,6,105,]),'empty':([4,5,6,10,14,22,23,25,28,50,53,83,114,],[7,11,7,11,20,29,42,20,29,72,78,106,122,]),'func_decls':([5,10,],[9,16,]),'func_decl':([5,10,],[10,10,]),'list_ids':([14,25,],[18,46,]),'body':([15,99,104,115,121,],[21,114,119,123,126,]),'statements':([22,28,],[27,48,]),'statement':([22,28,],[28,28,]),'assignment':([22,28,],[30,30,]),'condition':([22,28,],[31,31,]),'loop':([22,28,],[32,32,]),'func_call':([22,28,],[33,33,]),'print_stmt':([22,28,],[34,34,]),'params':([23,],[40,]),'param_list':([23,103,],[41,118,]),'type':([24,54,],[43,82,]),'expression':([49,50,51,52,53,64,98,102,],[58,73,74,75,80,96,73,80,]),'simple_expression':([49,50,51,52,53,64,85,89,90,98,102,],[59,59,59,59,59,59,107,108,109,59,59,]),'term':([49,50,51,52,53,64,85,89,90,93,98,102,],[60,60,60,60,60,60,60,60,60,110,60,60,]),'factor':([49,50,51,52,53,64,85,89,90,93,98,102,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'facestrc':([49,50,51,52,53,64,85,89,90,93,98,102,],[65,65,65,65,65,65,65,65,65,65,65,65,]),'faciden':([49,50,51,52,53,61,62,64,85,89,90,93,98,102,],[66,66,66,66,66,91,92,66,66,66,66,66,66,66,]),'cte':([49,50,51,52,53,61,62,64,85,89,90,93,98,102,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'args':([50,],[70,]),'expression_list':([50,98,],[71,113,]),'print_args':([53,],[76,]),'print_list':([53,102,],[77,117,]),'printable':([53,102,],[79,79,]),'relop':([59,],[85,]),'mulop':([63,],[93,]),'local_vars':([83,],[104,]),'else_part':([114,],[120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI vars_decls func_decls MAIN body END','program',8,'p_program','parser.py',135),
  ('func_decls -> func_decl func_decls','func_decls',2,'p_func_decls','parser.py',140),
  ('func_decls -> empty','func_decls',1,'p_func_decls','parser.py',141),
  ('func_decl -> VOID ID LPAREN params RPAREN LCO local_vars body RCO SEMI','func_decl',10,'p_func_decl','parser.py',150),
  ('params -> param_list','params',1,'p_params','parser.py',168),
  ('params -> empty','params',1,'p_params','parser.py',169),
  ('param_list -> ID COLON type','param_list',3,'p_param_list','parser.py',173),
  ('param_list -> ID COLON type COMMA param_list','param_list',5,'p_param_list','parser.py',174),
  ('body -> LBRACE statements RBRACE','body',3,'p_body','parser.py',185),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',190),
  ('statements -> empty','statements',1,'p_statements','parser.py',191),
  ('statement -> assignment','statement',1,'p_statement','parser.py',199),
  ('statement -> condition','statement',1,'p_statement','parser.py',200),
  ('statement -> loop','statement',1,'p_statement','parser.py',201),
  ('statement -> func_call','statement',1,'p_statement','parser.py',202),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',203),
  ('assignment -> ID EQ expression SEMI','assignment',4,'p_assignment','parser.py',209),
  ('condition -> IF LPAREN expression RPAREN body else_part SEMI','condition',7,'p_condition','parser.py',230),
  ('else_part -> ELSE body','else_part',2,'p_else_part','parser.py',234),
  ('else_part -> empty','else_part',1,'p_else_part','parser.py',235),
  ('loop -> WHILE LPAREN expression RPAREN DO body SEMI','loop',7,'p_loop','parser.py',241),
  ('func_call -> ID LPAREN args RPAREN SEMI','func_call',5,'p_func_call','parser.py',247),
  ('args -> expression_list','args',1,'p_args','parser.py',255),
  ('args -> empty','args',1,'p_args','parser.py',256),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',261),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','parser.py',262),
  ('print_stmt -> PRINT LPAREN print_args RPAREN SEMI','print_stmt',5,'p_print_stmt','parser.py',272),
  ('print_args -> print_list','print_args',1,'p_print_args','parser.py',276),
  ('print_args -> empty','print_args',1,'p_print_args','parser.py',277),
  ('print_list -> printable','print_list',1,'p_print_list','parser.py',281),
  ('print_list -> printable COMMA print_list','print_list',3,'p_print_list','parser.py',282),
  ('printable -> expression','printable',1,'p_printable','parser.py',289),
  ('printable -> CTE_STRING','printable',1,'p_printable','parser.py',290),
  ('vars_decls -> vars_decl vars_decls','vars_decls',2,'p_vars_decls','parser.py',295),
  ('vars_decls -> empty','vars_decls',1,'p_vars_decls','parser.py',296),
  ('vars_decl -> VAR ID list_ids COLON type SEMI','vars_decl',6,'p_vars_decl','parser.py',303),
  ('list_ids -> COMMA ID list_ids','list_ids',3,'p_list_ids','parser.py',310),
  ('list_ids -> empty','list_ids',1,'p_list_ids','parser.py',311),
  ('local_vars -> vars_decl','local_vars',1,'p_local_vars','parser.py',318),
  ('local_vars -> empty','local_vars',1,'p_local_vars','parser.py',319),
  ('type -> INT','type',1,'p_type','parser.py',323),
  ('type -> FLOAT','type',1,'p_type','parser.py',324),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',329),
  ('expression -> simple_expression relop simple_expression','expression',3,'p_expression','parser.py',330),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',338),
  ('simple_expression -> term PLUS simple_expression','simple_expression',3,'p_simple_expression','parser.py',339),
  ('simple_expression -> term MINUS simple_expression','simple_expression',3,'p_simple_expression','parser.py',340),
  ('term -> factor','term',1,'p_term','parser.py',377),
  ('term -> factor mulop term','term',3,'p_term','parser.py',378),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',386),
  ('factor -> facestrc','factor',1,'p_factor','parser.py',387),
  ('facestrc -> PLUS faciden','facestrc',2,'p_facestrc','parser.py',395),
  ('facestrc -> MINUS faciden','facestrc',2,'p_facestrc','parser.py',396),
  ('facestrc -> faciden','facestrc',1,'p_facestrc','parser.py',397),
  ('faciden -> ID','faciden',1,'p_faciden','parser.py',405),
  ('faciden -> cte','faciden',1,'p_faciden','parser.py',406),
  ('cte -> CTE_INT','cte',1,'p_cte','parser.py',417),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','parser.py',418),
  ('relop -> LT','relop',1,'p_relop','parser.py',422),
  ('relop -> GT','relop',1,'p_relop','parser.py',423),
  ('relop -> NEQ','relop',1,'p_relop','parser.py',424),
  ('mulop -> MULT','mulop',1,'p_mulop','parser.py',429),
  ('mulop -> DIV','mulop',1,'p_mulop','parser.py',430),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',436),
]
